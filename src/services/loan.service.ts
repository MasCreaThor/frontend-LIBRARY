// src/services/loan.service.ts
import axiosInstance from '@/lib/axios';
import type {
  Loan,
  LoanWithDetails,
  CreateLoanRequest,
  UpdateLoanRequest,
  ReturnLoanRequest,
  MarkAsLostRequest,
  LoanSearchFilters,
  OverdueFilters,
  CanBorrowResult,
  ResourceAvailabilityResult,
  LoanValidationResult,
  ReturnLoanResponse,
  RenewLoanResponse,
  LoanStats,
  OverdueStats,
  StockStats,
  ApiResponse,
  PaginatedResponse
} from '@/types/loan.types';

// ===== ENDPOINTS =====
const LOAN_ENDPOINTS = {
  // Pr√©stamos principales
  LOANS: '/loans',
  LOAN_BY_ID: (id: string) => `/loans/${id}`,
  VALIDATE_LOAN: '/loans/validate',
  PERSON_LOANS: (personId: string) => `/loans/person/${personId}`,
  RESOURCE_LOANS: (resourceId: string) => `/loans/resource/${resourceId}`,
  
  // Validaciones
  CAN_BORROW: (personId: string) => `/loans/can-borrow/${personId}`,
  RESOURCE_AVAILABILITY: (resourceId: string) => `/loans/resource-availability/${resourceId}`,
  
  // Devoluciones
  RETURNS: '/returns',
  RETURN_LOAN: (loanId: string) => `/returns/${loanId}`,
  MARK_AS_LOST: (loanId: string) => `/returns/${loanId}/mark-lost`,
  RENEW_LOAN: (loanId: string) => `/returns/${loanId}/renew`,
  RETURN_HISTORY: '/returns/history',
  PENDING_RETURNS: '/returns/pending',
  
  // Pr√©stamos vencidos
  OVERDUE: '/overdue',
  OVERDUE_STATS: '/overdue/stats',
  
  // Estad√≠sticas
  LOAN_STATS: '/loans/stats',
  STOCK_STATS: '/loans/stats/stock',
} as const;

export class LoanService {
  // ===== OPERACIONES PRINCIPALES =====

  /**
   * Crear un nuevo pr√©stamo
   */
  static async createLoan(loanData: CreateLoanRequest): Promise<LoanWithDetails> {
    try {
      console.log('üìù LoanService: Creando pr√©stamo:', loanData);
      
      const response = await axiosInstance.post<ApiResponse<LoanWithDetails>>(
        LOAN_ENDPOINTS.LOANS,
        loanData
      );

      if (response.data.success && response.data.data) {
        console.log('‚úÖ LoanService: Pr√©stamo creado exitosamente:', response.data.data._id);
        return response.data.data;
      }

      throw new Error(response.data.message || 'Error al crear pr√©stamo');
    } catch (error: any) {
      console.error('‚ùå LoanService: Error al crear pr√©stamo:', error);
      throw error;
    }
  }

  /**
   * Obtener todos los pr√©stamos con filtros
   */
  static async getLoans(filters: LoanSearchFilters = {}): Promise<PaginatedResponse<LoanWithDetails>> {
    try {
      const params = new URLSearchParams();
      
      Object.entries(filters).forEach(([key, value]) => {
        if (value !== undefined && value !== null && value !== '') {
          params.append(key, value.toString());
        }
      });

      console.log('üîç LoanService: Obteniendo pr√©stamos con filtros:', filters);
      
      const response = await axiosInstance.get<PaginatedResponse<LoanWithDetails>>(
        `${LOAN_ENDPOINTS.LOANS}?${params.toString()}`
      );

      console.log(`‚úÖ LoanService: ${response.data.data.length} pr√©stamos obtenidos`);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå LoanService: Error al obtener pr√©stamos:', error);
      throw error;
    }
  }

  /**
   * Obtener un pr√©stamo por ID
   */
  static async getLoanById(id: string): Promise<LoanWithDetails> {
    try {
      console.log('üîç LoanService: Obteniendo pr√©stamo por ID:', id);
      
      const response = await axiosInstance.get<ApiResponse<LoanWithDetails>>(
        LOAN_ENDPOINTS.LOAN_BY_ID(id)
      );

      if (response.data.success && response.data.data) {
        console.log('‚úÖ LoanService: Pr√©stamo obtenido exitosamente');
        return response.data.data;
      }

      throw new Error(response.data.message || 'Pr√©stamo no encontrado');
    } catch (error: any) {
      console.error('‚ùå LoanService: Error al obtener pr√©stamo:', error);
      throw error;
    }
  }

  /**
   * Actualizar un pr√©stamo
   */
  static async updateLoan(id: string, updateData: UpdateLoanRequest): Promise<LoanWithDetails> {
    try {
      console.log('üìù LoanService: Actualizando pr√©stamo:', id);
      
      const response = await axiosInstance.patch<ApiResponse<LoanWithDetails>>(
        LOAN_ENDPOINTS.LOAN_BY_ID(id),
        updateData
      );

      if (response.data.success && response.data.data) {
        console.log('‚úÖ LoanService: Pr√©stamo actualizado exitosamente');
        return response.data.data;
      }

      throw new Error(response.data.message || 'Error al actualizar pr√©stamo');
    } catch (error: any) {
      console.error('‚ùå LoanService: Error al actualizar pr√©stamo:', error);
      throw error;
    }
  }

  // ===== VALIDACIONES =====

  /**
   * Validar si una persona puede pedir prestado
   */
  static async canPersonBorrow(personId: string, includeDetails: boolean = true): Promise<CanBorrowResult> {
    try {
      console.log('üîç LoanService: Validando si persona puede pedir prestado:', personId);
      
      const params = new URLSearchParams();
      if (includeDetails) {
        params.append('includeDetails', 'true');
      }

      const response = await axiosInstance.get<ApiResponse<CanBorrowResult>>(
        `${LOAN_ENDPOINTS.CAN_BORROW(personId)}?${params.toString()}`
      );

      if (response.data.success && response.data.data) {
        console.log(`‚úÖ LoanService: Validaci√≥n completada - Can borrow: ${response.data.data.canBorrow}`);
        return response.data.data;
      }

      throw new Error(response.data.message || 'Error al validar persona');
    } catch (error: any) {
      console.error('‚ùå LoanService: Error al validar persona:', error);
      throw error;
    }
  }

  /**
   * Verificar disponibilidad de un recurso
   */
  static async checkResourceAvailability(
    resourceId: string, 
    requestedQuantity: number = 1
  ): Promise<ResourceAvailabilityResult> {
    try {
      console.log('üîç LoanService: Verificando disponibilidad del recurso:', resourceId, 'cantidad:', requestedQuantity);
      
      const params = new URLSearchParams();
      if (requestedQuantity > 1) {
        params.append('requestedQuantity', requestedQuantity.toString());
      }

      const response = await axiosInstance.get<ApiResponse<ResourceAvailabilityResult>>(
        `${LOAN_ENDPOINTS.RESOURCE_AVAILABILITY(resourceId)}?${params.toString()}`
      );

      if (response.data.success && response.data.data) {
        console.log(`‚úÖ LoanService: Disponibilidad verificada - Disponible: ${response.data.data.canLoan}`);
        return response.data.data;
      }

      throw new Error(response.data.message || 'Error al verificar disponibilidad');
    } catch (error: any) {
      console.error('‚ùå LoanService: Error al verificar disponibilidad:', error);
      throw error;
    }
  }

  /**
   * Validar pr√©stamo completo (persona + recurso + cantidad)
   */
  static async validateLoan(validationData: {
    personId: string;
    resourceId: string;
    quantity: number;
  }): Promise<LoanValidationResult> {
    try {
      console.log('üîç LoanService: Validando pr√©stamo completo:', validationData);
      
      const response = await axiosInstance.post<ApiResponse<LoanValidationResult>>(
        LOAN_ENDPOINTS.VALIDATE_LOAN,
        validationData
      );

      if (response.data.success && response.data.data) {
        console.log(`‚úÖ LoanService: Validaci√≥n completada - V√°lido: ${response.data.data.isValid}`);
        return response.data.data;
      }

      throw new Error(response.data.message || 'Error al validar pr√©stamo');
    } catch (error: any) {
      console.error('‚ùå LoanService: Error al validar pr√©stamo:', error);
      throw error;
    }
  }

  // ===== DEVOLUCIONES =====

  /**
   * Devolver un pr√©stamo
   */
  static async returnLoan(loanId: string, returnData: ReturnLoanRequest): Promise<ReturnLoanResponse> {
    try {
      console.log('üìù LoanService: Devolviendo pr√©stamo:', loanId);
      
      const response = await axiosInstance.post<ApiResponse<ReturnLoanResponse>>(
        LOAN_ENDPOINTS.RETURN_LOAN(loanId),
        returnData
      );

      if (response.data.success && response.data.data) {
        console.log('‚úÖ LoanService: Pr√©stamo devuelto exitosamente');
        return response.data.data;
      }

      throw new Error(response.data.message || 'Error al devolver pr√©stamo');
    } catch (error: any) {
      console.error('‚ùå LoanService: Error al devolver pr√©stamo:', error);
      throw error;
    }
  }

  /**
   * Marcar pr√©stamo como perdido
   */
  static async markAsLost(loanId: string, lostData: MarkAsLostRequest): Promise<LoanWithDetails> {
    try {
      console.log('üìù LoanService: Marcando pr√©stamo como perdido:', loanId);
      
      const response = await axiosInstance.post<ApiResponse<LoanWithDetails>>(
        LOAN_ENDPOINTS.MARK_AS_LOST(loanId),
        lostData
      );

      if (response.data.success && response.data.data) {
        console.log('‚úÖ LoanService: Pr√©stamo marcado como perdido exitosamente');
        return response.data.data;
      }

      throw new Error(response.data.message || 'Error al marcar como perdido');
    } catch (error: any) {
      console.error('‚ùå LoanService: Error al marcar como perdido:', error);
      throw error;
    }
  }

  /**
   * Renovar un pr√©stamo
   */
  static async renewLoan(loanId: string): Promise<RenewLoanResponse> {
    try {
      console.log('üìù LoanService: Renovando pr√©stamo:', loanId);
      
      const response = await axiosInstance.post<ApiResponse<RenewLoanResponse>>(
        LOAN_ENDPOINTS.RENEW_LOAN(loanId)
      );

      if (response.data.success && response.data.data) {
        console.log('‚úÖ LoanService: Pr√©stamo renovado exitosamente');
        return response.data.data;
      }

      throw new Error(response.data.message || 'Error al renovar pr√©stamo');
    } catch (error: any) {
      console.error('‚ùå LoanService: Error al renovar pr√©stamo:', error);
      throw error;
    }
  }

  // ===== PR√âSTAMOS VENCIDOS =====

  /**
   * Obtener pr√©stamos vencidos
   */
  static async getOverdueLoans(filters: OverdueFilters = {}): Promise<PaginatedResponse<LoanWithDetails>> {
    try {
      const params = new URLSearchParams();
      
      Object.entries(filters).forEach(([key, value]) => {
        if (value !== undefined && value !== null && value !== '') {
          params.append(key, value.toString());
        }
      });

      console.log('üîç LoanService: Obteniendo pr√©stamos vencidos:', filters);
      
      const response = await axiosInstance.get<PaginatedResponse<LoanWithDetails>>(
        `${LOAN_ENDPOINTS.OVERDUE}?${params.toString()}`
      );

      console.log(`‚úÖ LoanService: ${response.data.data.length} pr√©stamos vencidos obtenidos`);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå LoanService: Error al obtener pr√©stamos vencidos:', error);
      throw error;
    }
  }

  /**
   * Obtener estad√≠sticas de pr√©stamos vencidos
   */
  static async getOverdueStats(): Promise<OverdueStats> {
    try {
      console.log('üîç LoanService: Obteniendo estad√≠sticas de vencidos');
      
      const response = await axiosInstance.get<ApiResponse<OverdueStats>>(
        LOAN_ENDPOINTS.OVERDUE_STATS
      );

      if (response.data.success && response.data.data) {
        console.log('‚úÖ LoanService: Estad√≠sticas de vencidos obtenidas');
        return response.data.data;
      }

      throw new Error(response.data.message || 'Error al obtener estad√≠sticas');
    } catch (error: any) {
      console.error('‚ùå LoanService: Error al obtener estad√≠sticas de vencidos:', error);
      throw error;
    }
  }

  // ===== CONSULTAS ESPEC√çFICAS =====

  /**
   * Obtener pr√©stamos de una persona
   */
  static async getPersonLoans(
    personId: string, 
    filters: Partial<LoanSearchFilters> = {}
  ): Promise<PaginatedResponse<LoanWithDetails>> {
    try {
      const params = new URLSearchParams();
      
      Object.entries(filters).forEach(([key, value]) => {
        if (value !== undefined && value !== null && value !== '') {
          params.append(key, value.toString());
        }
      });

      console.log('üîç LoanService: Obteniendo pr√©stamos de persona:', personId);
      
      const response = await axiosInstance.get<PaginatedResponse<LoanWithDetails>>(
        `${LOAN_ENDPOINTS.PERSON_LOANS(personId)}?${params.toString()}`
      );

      console.log(`‚úÖ LoanService: ${response.data.data.length} pr√©stamos de persona obtenidos`);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå LoanService: Error al obtener pr√©stamos de persona:', error);
      throw error;
    }
  }

  /**
   * Obtener pr√©stamos de un recurso
   */
  static async getResourceLoans(
    resourceId: string, 
    filters: Partial<LoanSearchFilters> = {}
  ): Promise<PaginatedResponse<LoanWithDetails>> {
    try {
      const params = new URLSearchParams();
      
      Object.entries(filters).forEach(([key, value]) => {
        if (value !== undefined && value !== null && value !== '') {
          params.append(key, value.toString());
        }
      });

      console.log('üîç LoanService: Obteniendo pr√©stamos de recurso:', resourceId);
      
      const response = await axiosInstance.get<PaginatedResponse<LoanWithDetails>>(
        `${LOAN_ENDPOINTS.RESOURCE_LOANS(resourceId)}?${params.toString()}`
      );

      console.log(`‚úÖ LoanService: ${response.data.data.length} pr√©stamos de recurso obtenidos`);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå LoanService: Error al obtener pr√©stamos de recurso:', error);
      throw error;
    }
  }

  // ===== ESTAD√çSTICAS =====

  /**
   * Obtener estad√≠sticas generales de pr√©stamos
   */
  static async getLoanStats(): Promise<LoanStats> {
    try {
      console.log('üîç LoanService: Obteniendo estad√≠sticas de pr√©stamos');
      
      const response = await axiosInstance.get<ApiResponse<LoanStats>>(
        LOAN_ENDPOINTS.LOAN_STATS
      );

      if (response.data.success && response.data.data) {
        console.log('‚úÖ LoanService: Estad√≠sticas de pr√©stamos obtenidas');
        return response.data.data;
      }

      throw new Error(response.data.message || 'Error al obtener estad√≠sticas');
    } catch (error: any) {
      console.error('‚ùå LoanService: Error al obtener estad√≠sticas de pr√©stamos:', error);
      throw error;
    }
  }

  /**
   * Obtener estad√≠sticas de stock
   */
  static async getStockStats(): Promise<StockStats> {
    try {
      console.log('üîç LoanService: Obteniendo estad√≠sticas de stock');
      
      const response = await axiosInstance.get<ApiResponse<StockStats>>(
        LOAN_ENDPOINTS.STOCK_STATS
      );

      if (response.data.success && response.data.data) {
        console.log('‚úÖ LoanService: Estad√≠sticas de stock obtenidas');
        return response.data.data;
      }

      throw new Error(response.data.message || 'Error al obtener estad√≠sticas de stock');
    } catch (error: any) {
      console.error('‚ùå LoanService: Error al obtener estad√≠sticas de stock:', error);
      throw error;
    }
  }

  // ===== HISTORIAL Y DEVOLUCIONES =====

  /**
   * Obtener historial de devoluciones
   */
  static async getReturnHistory(filters: Partial<LoanSearchFilters> = {}): Promise<PaginatedResponse<LoanWithDetails>> {
    try {
      const params = new URLSearchParams();
      
      Object.entries(filters).forEach(([key, value]) => {
        if (value !== undefined && value !== null && value !== '') {
          params.append(key, value.toString());
        }
      });

      console.log('üîç LoanService: Obteniendo historial de devoluciones');
      
      const response = await axiosInstance.get<PaginatedResponse<LoanWithDetails>>(
        `${LOAN_ENDPOINTS.RETURN_HISTORY}?${params.toString()}`
      );

      console.log(`‚úÖ LoanService: ${response.data.data.length} devoluciones en historial`);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå LoanService: Error al obtener historial de devoluciones:', error);
      throw error;
    }
  }

  /**
   * Obtener pr√©stamos pendientes de devoluci√≥n
   */
  static async getPendingReturns(filters: Partial<LoanSearchFilters> = {}): Promise<PaginatedResponse<LoanWithDetails>> {
    try {
      const params = new URLSearchParams();
      
      Object.entries(filters).forEach(([key, value]) => {
        if (value !== undefined && value !== null && value !== '') {
          params.append(key, value.toString());
        }
      });

      console.log('üîç LoanService: Obteniendo pr√©stamos pendientes de devoluci√≥n');
      
      const response = await axiosInstance.get<PaginatedResponse<LoanWithDetails>>(
        `${LOAN_ENDPOINTS.PENDING_RETURNS}?${params.toString()}`
      );

      console.log(`‚úÖ LoanService: ${response.data.data.length} pr√©stamos pendientes de devoluci√≥n`);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå LoanService: Error al obtener pr√©stamos pendientes:', error);
      throw error;
    }
  }
}